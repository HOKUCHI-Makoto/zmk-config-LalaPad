#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define SECONDARY_LAYER 1
#define TERTIARY_LAYER  2
#define SYSTEM_LAYER    3
#define MOUSE_R_LAYER   4
#define SCROLL_R_LAYER  5
#define MOUSE_L_LAYER   6
#define SCROLL_L_LAYER  7

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_R_LAYER 500>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 5>,
            <&zip_temp_layer MOUSE_R_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 8>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 3 2>,
        <&zip_temp_layer MOUSE_L_LAYER 500>;

    lowspeedmode {
        layers = <SECONDARY_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 4>,
            <&zip_temp_layer MOUSE_L_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_scroll_scaler 1 6>;
    };
};

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        scroll_down_up: behavior_sensor_rotate_mouse_wheel_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_left_right: behavior_sensor_rotate_mouse_wheel_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        scroll_right_left: behavior_sensor_rotate_mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };

        volume_up_down: behavior_sensor_rotate_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "DOT_COMMA";
        };

        pls_minus: pls_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp MINUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "PLS_MINUS";
        };

        allow_pageup: allow_pageup {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&kp PAGE_UP>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEUP";
        };

        allow_pagedown: allow_pagedown {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEDOWN";
        };

        allow_home: allow_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp HOME>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_HOME";
        };

        allow_end: allow_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp END>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_END";
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BS_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RCTL|MOD_LCTL|MOD_LSFT|MOD_RSFT)>;
        };

        mo1_2: mo1_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "MO1_2";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 2>;
        };

        rshift_rctrl: rshift_rctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "RSHIFT_RCTRL";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT>, <&kp RCTRL>;
        };
    };

    combos {
        compatible = "zmk,combos";

        layer2_left {
            bindings = <&mo 2>;
            key-positions = <39 40>;
        };

        layer2_right {
            bindings = <&mo 2>;
            key-positions = <43 44>;
        };

        lclk_right {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        rclk_right {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        lclk_left {
            bindings = <&mkp LCLK>;
            key-positions = <16 15>;
        };

        rclk_left {
            bindings = <&mkp RCLK>;
            key-positions = <15 14>;
        };
    };

    macros {
        macro_security: macro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(M) &kp AT &kp K &kp N0 &kp T &kp N0 &kp LS(H) &kp N0 &kp K &kp U &kp C &kp H &kp N1>;
            label = "MACRO1";
        };

        macro_norm: macro_norm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(M) &kp A &kp K &kp N0 &kp T &kp N0 &kp LS(H) &kp N0 &kp K &kp U &kp C &kp H &kp N1>;
            label = "MACRO_NORM";
        };

        macro_short: macro_short {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(H) &kp N0 &kp K &kp U &kp C &kp H &kp N1>;
            label = "MACRO_SHORT";
        };

        fenrir: fenrir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(INT_YEN))>;
            label = "FENRIR";
        };

        everything: everything {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(BACKSPACE))>;
            label = "EVERYTHING";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_up_down>, <&scroll_up_down>;

            bindings = <
&kp ESC    &kp Q         &kp W         &kp E            &kp R        &kp T          &kp Y         &kp U           &kp I           &kp O             &kp P              &bs_del
&kp TAB    &kp A         &kp S         &kp D            &kp F        &kp G          &kp H         &kp J           &kp K           &kp L             &kp SEMI           &kp SQT
&kp LSHFT  &kp Z         &kp X         &kp C            &kp V        &kp B          &kp N         &kp M           &kp COMMA       &kp PERIOD        &kp SLASH          &kp MINUS
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &mo1_2           &kp SPACE    &lt 3 LANG2    &lt 3 LANG1   &kp ENTER       &mo1_2          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &rshift_rctrl
                         &allow_end    &allow_pagedown  &allow_home  &allow_pageup  &kp UP_ARROW  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
            >;
        };

        SYM-NUM_LAYER {
            display-name = "sym-num_layer";
            bindings = <
&trans  &kp GRAVE    &kp DOUBLE_QUOTES  &kp EQUAL   &none                 &kp TILDE              &kp INT_YEN  &kp UNDER        &kp SLASH     &kp N7        &kp N8        &kp N9
&trans  &kp AT       &kp SINGLE_QUOTE   &kp DOLLAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS    &kp PLUS         &kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6
&trans  &kp PERCENT  &kp EXCLAMATION    &kp CARET   &kp PIPE              &kp AMPERSAND          &kp HASH     &none            &kp EQUAL     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3
&trans  &trans       &trans             &trans      &trans                &trans                 &trans       &trans           &trans        &kp NUMBER_0  &dot_comma    &kp ENTER
                     &kp LC(TAB)        &trans      &kp LS(LC(TAB))       &trans                 &trans       &kp LS(LC(TAB))  &trans        &kp LC(TAB)
            >;

            sensor-bindings = <&scroll_up_down>, <&scroll_left_right>;
        };

        FUNCTION_LAYER {
            display-name = "function_layer";
            sensor-bindings =
                <&scroll_left_right>,
                <&inc_dec_kp UP_ARROW DOWN_ARROW>;

            bindings = <
&trans  &macro_security  &none          &kp UP_ARROW  &none         &none          &kp PRINTSCREEN  &kp SCROLLLOCK  &kp C_PAUSE    &kp F7         &kp F8   &kp F9
&trans  &macro_norm      &kp LEFT       &kp DOWN      &kp RIGHT     &kp PAGE_UP    &kp INSERT       &kp HOME        &kp PAGE_UP    &kp F4         &kp F5   &kp F6
&trans  &macro_short     &none          &fenrir       &everything   &kp PAGE_DOWN  &kp DELETE       &kp END         &kp PAGE_DOWN  &kp F1         &kp F2   &kp F3
&trans  &trans           &trans         &trans        &trans        &trans         &trans           &trans          &trans         &kp F10        &kp F11  &kp F12
                         &kp LA(RIGHT)  &trans        &kp LA(LEFT)  &trans         &trans           &kp RA(LEFT)    &trans         &kp RA(RIGHT)
            >;
        };

        SYSTEM_LAYER {
            display-name = "system_layer";
            sensor-bindings = <&scroll_up_down>, <&volume_up_down>;

            bindings = <
&trans  &trans  &trans  &trans  &trans       &trans      &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4
&trans  &trans  &trans  &trans  &bootloader  &sys_reset  &sys_reset    &bootloader   &studio_unlock  &bt BT_CLR    &bt BT_CLR_ALL  &trans
&trans  &trans  &trans  &trans  &trans       &trans      &trans        &trans        &trans          &trans        &trans          &trans
&trans  &trans  &trans  &trans  &trans       &trans      &trans        &trans        &trans          &trans        &trans          &trans
                &trans  &trans  &trans       &trans      &trans        &trans        &trans          &trans
            >;
        };

        MOUSE_R_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
&trans  &trans  &trans     &mkp MB5   &mkp MB4   &trans  &trans  &mkp MB4   &mkp MB5   &none      &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans  &trans  &trans     &trans     &trans     &trans  &trans
                &trans     &trans     &trans     &trans  &trans  &trans     &trans     &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
&trans  &trans  &trans     &mkp MB5   &mkp MB4   &trans  &trans  &mkp MB4   &mkp MB5   &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans  &trans  &trans     &trans     &trans     &trans  &trans
                &trans     &trans     &trans     &trans  &trans  &trans     &trans     &trans
            >;
        };

        SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
